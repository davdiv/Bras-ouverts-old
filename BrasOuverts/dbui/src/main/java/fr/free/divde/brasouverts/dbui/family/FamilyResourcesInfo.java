/*
 * Copyright (C) 2011 divde <divde@free.fr>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * FamilyResourcesInfo.java
 *
 * Created on 19 ao√ªt 2011, 13:19:32
 */
package fr.free.divde.brasouverts.dbui.family;

import fr.free.divde.brasouverts.db.listeners.ChangeListener.ChangeType;
import fr.free.divde.brasouverts.db.listeners.FamilyResourcesChangeListener;
import fr.free.divde.brasouverts.db.model.Family;
import fr.free.divde.brasouverts.dbui.uicomponents.BindableComponent;
import lombok.Getter;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.beansbinding.Binding;
import org.jdesktop.beansbinding.Bindings;

/**
 *
 * @author divde <divde@free.fr>
 */
public class FamilyResourcesInfo extends javax.swing.JPanel implements BindableComponent {

    public void setFamily(Family newValue) {
        firePropertyChange(PROP_FAMILY, family, family = newValue);
    }
    public static final String PROP_FAMILY = "family";
    @Getter
    protected Family family;
    private FamilyResourcesChangeListener changeListener;

    /** Creates new form FamilyResourcesInfo */
    public FamilyResourcesInfo() {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        dailyRemainingToLiveByPersonLabel = new javax.swing.JLabel();
        dailyRemainingToLiveByPersonField = new javax.swing.JFormattedTextField();

        dailyRemainingToLiveByPersonLabel.setText(org.openide.util.NbBundle.getMessage(FamilyResourcesInfo.class, "FamilyResourcesInfo.dailyRemainingToLiveByPersonLabel.text")); // NOI18N

        dailyRemainingToLiveByPersonField.setEditable(false);
        dailyRemainingToLiveByPersonField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));
        dailyRemainingToLiveByPersonField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${family.dailyRemainingToLiveByPerson}"), dailyRemainingToLiveByPersonField, org.jdesktop.beansbinding.BeanProperty.create("value"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dailyRemainingToLiveByPersonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dailyRemainingToLiveByPersonField, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dailyRemainingToLiveByPersonLabel)
                    .addComponent(dailyRemainingToLiveByPersonField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField dailyRemainingToLiveByPersonField;
    private javax.swing.JLabel dailyRemainingToLiveByPersonLabel;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    @Override
    public void bind() {
        if (bindingGroup != null) {
            bindingGroup.bind();
        } else {
            changeListener = new FamilyResourcesChangeListener() {

                @Override
                protected void change(Object source, ChangeType changeType) {
                    family.computeDailyRemainingToLiveByPerson();
                }
            };
            initComponents();
            Binding binding = Bindings.createAutoBinding(UpdateStrategy.READ, this, BeanProperty.create(PROP_FAMILY), changeListener, BeanProperty.create("rootObject"));
            bindingGroup.addBinding(binding);
            binding.bind();
        }
        changeListener.bind();
    }

    @Override
    public void unbind() {
        if (bindingGroup != null) {
            changeListener.unbind();
            bindingGroup.unbind();
        }
    }
}
